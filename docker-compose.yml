services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Anonymous volume for node_modules to avoid host conflicts
    ports:
      - "5173:5173"
    environment:
      NODE_ENV: development
      VITE_HOST: 0.0.0.0
    command: yarn dev --host
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped  # Ensure container restarts unless explicitly stopped

  mysql:
    image: mysql:8.0
    container_name: roomix_mysql  # More specific container name
    restart: unless-stopped
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - "3307:3306"  # Expose MySQL port for external access (optional)
    networks:
      - app-network
    environment:
      MYSQL_ROOT_PASSWORD: secret 
      MYSQL_DATABASE: roomix
      MYSQL_USER: abc
      MYSQL_PASSWORD: secret
    healthcheck:  # Add healthcheck for better dependency management
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: laravel_app
    volumes:
      - ./backend:/app
      - ./backend/docker/php.ini:/usr/local/etc/php/php.ini
      - ./backend/storage:/var/www/storage  # Use specific path for storage
    ports:
      - "9000:9000"  # Consider if this needs to be exposed externally
    networks:
      - app-network
    environment:
      DB_CONNECTION: mysql
      DB_HOST: mysql  
      DB_PORT: 3306
      DB_DATABASE: roomix
      DB_USERNAME: abc
      DB_PASSWORD:  secret
      APP_ENV: local  # Add Laravel-specific env
      APP_DEBUG: true
    depends_on:
      mysql:
        condition: service_healthy  # Wait for MySQL to be healthy
    command: >
      sh -c "composer install &&
             php artisan key:generate &&
             php artisan migrate &&
             php artisan serve --host=0.0.0.0 --port=9000"
    restart: unless-stopped

  nginx:
    image: nginx:latest
    container_name: nginx_web
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./backend/public:/var/www/public:ro  # Serve Laravel public files
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    restart: unless-stopped

volumes:
  mysql-data:
    name: roomix_mysql_data  # Named volume for clarity

networks:
  app-network:
    driver: bridge
    name: roomix_network  # Named network for clarity